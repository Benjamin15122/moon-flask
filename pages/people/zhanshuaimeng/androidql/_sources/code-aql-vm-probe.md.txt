probe需要做什么
==============

从[AndroidQL的probe如何工作](./aql-probe-how-work.html)可知，probe可以响应外部来自用户的AQL指令。这些指令用来完成对于应用程序内部运行数据的查询和对运行状态的改变。因此，probe具备对AQL指令的处理和数据管理的能力，具体包括：

* 处理来自于用户的对于该probe的AQL操作
* 获取应用程序运行时产生的数据
* 对于运行时数据进行有效的存储
* 数据读取和传输

AndroidQL中任何probe都要具备以上的能力，当前针对这些问题，框架提供了统一的处理机制。

### 处理AQL指令

每一条AQL操作都会被分发至对应的目标probe。一般情况下，probe只需要处理`SELECT`或`PERFORM`类型的AQL操作。

`PERFORM`类型的AQL中可能会以`probe.action`的格式指定`action`，目标probe注册`handler`来对`action`进行响应。例如对于`PERFORM gui.CLICK (100,200)`，目标probe为`gui`，因此对于`CLICK`，`gui`实现了`ClickHandler`来进行处理，在这之前需要将`ClickHanlder`和`CLICK`进行绑定。

对于`SELECT`类型的操作，probe需要进行查表操作，将查询结果进行有效的组织并返回。

### 数据管理

probe的数据管理主要包括数据获取、存储和传输三个部分。

##### 获取运行时数据

数据的获取主要是通过对ART虚拟机解释器的修改来完成的，对于实现特定测试分析目的的probe，它需要决定获取的数据内容和类型，并且确定数据的来源。

##### 数据存储

每一个probe都会搜集所需的数据并且以内存表的形式对数据进行组织和存储。这些内存表首先需要定义一个表头，继而逐行插入数据。一个probe可以建立多个表结构，对不同的数据进行存储。当用户使用AQL语言对表发起查询时，probe应该能够高效地检索出所需的数据。

AndroidQL的内存表使用SQLite的`in-memory`机制实现。

##### 数据传输

probe应该能够将查询所得数据，可靠地传输给aql-client。在这个过程中，probe需要按照[通信协议规范](./aql-spec.html)的格式对表中查找所得数据进行封装，并通过稳定的通信信道完成像外部的传输。

