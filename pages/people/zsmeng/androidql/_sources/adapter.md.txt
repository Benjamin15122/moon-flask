如何兼容不同的 AOSP 版本
======

目前，AndroidQL支持AOSP的版本为Android5, 6, 7, 8. 要想在不同的Android版本之间实现兼容，就要维持AndroidQL和Android源码“相交”的那些部分(API)在不同ART版本之间的稳定性. 先来关注从ART源码部分，从Android5过度到Android8哪些部分发生了变化：

1. 部分API，特别是一些提供base功能的API
2. 宏定义，一些线程安全相关的annotation

接下来跟踪这些发生变化的部分

#### 宏定义

主要是和线程安全相关的annotation，其他一些宏定义也发生了变化，但是在AndroidQL的实现中并没有使用到.

AOSP版本 | 共享锁 | 互斥锁 | 不应该持有某个锁
----|------|---- | ----
8 | REQUIRES_SHARED(lock)  | REQUIRES(lock)| REQUIRES(!lock)
7 | SHARED_REQUIRES(lock)  | REQUIRES(lock)| REQUIRES(!lock)
6 | SHARED_LOCKS_REQUIRED(lock) | EXCLUSIVE_LOCKS_REQUIRED(lock) | LOCKS_EXCLUDED(lock)
5 | SHARED_LOCKS_REQUIRED(lock) | EXCLUSIVE_LOCKS_REQUIRED(lock) | LOCKS_EXCLUDED(lock)
AndroidQL | REQUIRES_SHARED(lock) | REQUIRES(lock) | LOCKS_EXCLUDED(lock)

#### API

API的改变主要表现在，在AOSP7之前，部分提供base功能的API被定义在aosp/art/runtime/base目录下, AOSP8之后，这部分API中的一小部分被移动在了aosp/system/core/base/include目录下. AndroidQL使用到了**StringPrintf**来格式化std::string字符串，所以应该将这种变更考虑进来才可以实现不同Android版本的兼容

### AndroidQL的处理方式

AndroidQL将这些变更统一进行进行封装，提供一致的API给AndroidQL使用，在每个版本的aosp目录中aosp/art/runtime下的makefile中添加PLATFORM_VERSION_MAJOR宏定义来实现条件编译. 具体可见aql/adapter的实现. 未来有新的不一致问题出现，都会采用类似的解决方式.
